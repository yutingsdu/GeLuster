#!/bin/bash
shellpath=`dirname $0`
output_dir="geluster_outdir"
temp_dir="tempDir"
reads="No_input"
seqType="cDNA"
readsformat="fq"
Mflag=0
itrnum=3
threads=10
tempCluster=""
usage()
{
cat << EOT
===========================================================================

GeLuster usage:

** Required **

--reads/-r <string>	 : path to the read file

---------------------------------------------------------------------------

** Options **

--help/-h		  : Output GeLuster Help Information.

--version/-v		  : Print current version of GeLuster.

--iteration/-i <int>	  : Number of GeLuster iterations ([3,9], default: 3).

--seqType/-s <string>	  : 'cDNA' for ONT cDNA data, 'dRNA' for ONT direct RNA data, or 'PacBio' for pacbio data (default:cDNA).

--rform/-f <string>	  : 'fq' for FASTQ format reads, 'fa' for FASTA format reads (default: fq).

--threads/-t <int> 	  : Number of threads to be used (default: 10).

--multi/-M 		  : To generate a proxy of gene expression matrix for multiple RNA-seq samples. Input files should be separated by commas.

--output_dir/-o <string>  : Output path, default: geluster_outdir.

---------------------------------------------------------------------------

** Typical commands **

A typical GeLuster command might be:

  GeLuster -r reads.fastq -f fq -s cDNA -o geluster_outdir 

===========================================================================
EOT
}
#usage

# parse options:
RET=`getopt -o hvr:o:i:s:f:Mt: \
--long help,version,reads:,output_dir:,\
iteration:,seqType:,format:,\
multi,threads:\
  -n ' * ERROR' -- "$@"`

# Note the quotes around $RET: they are essential!
eval set -- "$RET"
# set option values
while true; do
    case "$1" in
        -h | --help ) usage; exit 1;;
        -v | --version ) echo "** The current version of GeLuster is  v.1.1 **"; exit 1;;
	-M | --multi ) Mflag=1
			shift 1 ;;
        -o | --output_dir) output_dir=$2     
			shift 2 ;;
        -t | --threads) threads=$2     
			shift 2 ;;
        -r | --reads) reads=$2 
			shift 2 ;;
        -i | --iteration) itrnum=$2 
			shift 2 ;;
        -s | --seqType) seqType=$2 
			shift 2 ;;
        -f | --rform) readsformat=$2 
			shift 2 ;;
        -- ) shift; break ;;
        * ) echoerror "internal error!" ; exit 1 ;;
     esac
done

#echo $Mflag $reads $itrnum $seqType $readsformat

if [ $reads == "No_input" ]; then
         echo "    "
         echo "[Error] : Reads file is not provided!"
         echo "    "
	 usage
         exit 1
fi

if [ $Mflag == 0 ] && [ ! -e $reads ]; then
        echo " ** Error: reads file is not exist! **"
        exit 1
fi
if [ $itrnum -gt 9 ]; then
	echo " ** Largest iterations number is 9! **"
	exit 1
fi
geluster_run_1st()
{
    tempDir=$output_dir/$temp_dir
    log=$output_dir/geluster.log

    iFlag=$1
    query=$reads

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/PseudoRef $query $readsformat $iFlag $seqType $tempDir" >$log
    $shellpath/src/PseudoRef $query $readsformat $iFlag $seqType $tempDir
    ref=$tempDir/$iFlag".pseudo.fasta"

    prefix=$tempDir/$iFlag".pseudo"

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] minimap2 -t $threads -ax splice -k 11 $ref $query > $prefix.sam" >>$log
    minimap2 -t $threads -ax splice -k 11 $ref $query > $prefix.sam 2>>$log
    samtools sort --threads 10  -o $prefix.bam $prefix.sam 2>>$log

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".alignment.info" ">>$log
    $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".alignment.info" 


    query2=$tempDir/$iFlag".pseudo.fasta"
    prefix=$tempDir/$iFlag".pseudo-self"
    if [ $seqType == "cDNA" ]; then
	MyDate=$(date "+%d/%m/%Y %T")
        echo "[$MyDate] minimap2 -t $threads -ax splice -k 11 -X -N 1 $ref $query2 > $prefix.sam" >>$log
        minimap2 -t $threads -ax splice -k 11 -X -N 1 $ref $query2 > $prefix.sam 2>>$log
    	samtools sort --threads 10 -o $prefix.bam $prefix.sam 2>>$log

	MyDate=$(date "+%d/%m/%Y %T")
    	echo "[$MyDate] $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".self.alignment.info"">>$log
    	$shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".self.alignment.info" 
    fi

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/get_cluster $query $readsformat $tempDir/$iFlag".pseudoref-reads.info" $tempDir/$iFlag".alignment.info" $tempDir/$iFlag".self.alignment.info" $iFlag $seqType $tempDir" >>$log
    $shellpath/src/get_cluster $query $readsformat $tempDir/$iFlag".pseudoref-reads.info" $tempDir/$iFlag".alignment.info" $tempDir/$iFlag".self.alignment.info" $iFlag $seqType $tempDir
    tempCluster="$tempCluster $tempDir/$iFlag.myCluster_multi.tsv"
}
geluster_run_iteration()
{
    tempDir=$output_dir/$temp_dir
    log=$output_dir/geluster.log

    iFlag=$1
    iFlag_pre=$2
    query=$tempDir/$iFlag_pre.singleton.fasta

    MyDate=$(date "+%d/%m/%Y %T")
    echo " " >>$log
    echo "[$MyDate] $shellpath/src/PseudoRef $query fa $iFlag $seqType $tempDir" >>$log
    $shellpath/src/PseudoRef $query fa $iFlag $seqType $tempDir 
    ref=$tempDir/$iFlag".pseudo.fasta"

    prefix=$tempDir/$iFlag".pseudo"

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] minimap2 -t $threads -ax splice -k 11 $ref $query > $prefix.sam  2>>$log" >>$log
    minimap2 -t $threads -ax splice -k 11 $ref $query > $prefix.sam  2>>$log
    samtools sort --threads 10 -o $prefix.bam $prefix.sam 2>>$log

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".alignment.info" " >>$log
    $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".alignment.info" 

    query2=$tempDir/$iFlag".pseudo.fasta"
    prefix=$tempDir/$iFlag".pseudo-self"
    if [ $seqType == "cDNA" ]; then
      MyDate=$(date "+%d/%m/%Y %T")
      echo "[$MyDate] minimap2 -t $threads -ax splice -k 11 -X -N 1 $ref $query2 > $prefix.sam 2>>$log" >>$log
      minimap2 -t $threads -ax splice -k 11 -X -N 1 $ref $query2 > $prefix.sam 2>>$log
      samtools sort --threads 10 -o $prefix.bam $prefix.sam 2>>$log

      MyDate=$(date "+%d/%m/%Y %T")
      echo "[$MyDate] $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".self.alignment.info" " >>$log
      $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".self.alignment.info" 
    fi

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/get_cluster $query fa $tempDir/$iFlag".pseudoref-reads.info" $tempDir/$iFlag".alignment.info" $tempDir/$iFlag".self.alignment.info" $iFlag $seqType $tempDir" >>$log
    $shellpath/src/get_cluster $query fa $tempDir/$iFlag".pseudoref-reads.info" $tempDir/$iFlag".alignment.info" $tempDir/$iFlag".self.alignment.info" $iFlag $seqType $tempDir
    tempCluster="$tempCluster $tempDir/$iFlag.myCluster_multi.tsv"
}

MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Running..."
if [ ! -x "$output_dir" ]; then  
    mkdir -p $output_dir/$temp_dir
else 
    echo "[$MyDate] [Warning] : $output_dir exists already. It will be overwritten."
    rm -rf $output_dir
    mkdir -p $output_dir/$temp_dir
fi

if [ $Mflag == 1 ];then
	multireads=$reads
        echo "[$MyDate] [Warning] : You are using multi sample mode..."
        $shellpath/src/MergeFiles $reads $output_dir/$temp_dir"/merged.fastq"
	reads=$output_dir/$temp_dir"/merged.fastq"
fi
########################################=======================================================
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] First iteration..."
geluster_run_1st "1st"

MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Second iteration..."
geluster_run_iteration "2nd" "1st"

MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Third iteration..."
geluster_run_iteration "3rd" "2nd"

#itrnum

if [ $itrnum -gt 3 ]; then
	MyDate=$(date "+%d/%m/%Y %T")
	echo "[$MyDate] 4th iteration..."
	geluster_run_iteration "4th" "3rd"
	if [ $itrnum -gt 4 ]; then
		for((i=5;i<=$itrnum;i++))
		do
			MyDate=$(date "+%d/%m/%Y %T")
			echo "[$MyDate] $i"th" iteration..."
			let j=$i-1
			geluster_run_iteration $i"th" $j"th"
		done
	fi
fi
########################################=======================================================
MyDate=$(date "+%d/%m/%Y %T")
echo " ">>$log
mkdir -p $output_dir"/fastq_files"
echo "[$MyDate] $shellpath/src/FinalCluster $tempCluster $output_dir"/" $Mflag $reads" >>$log
$shellpath/src/FinalCluster $tempCluster $output_dir $Mflag $reads 

MyDate=$(date "+%d/%m/%Y %T")
echo " ">>$log
echo "[$MyDate] Done, clustering results is written to "$output_dir"/GeLuster.tsv!" >>$log
echo "[$MyDate] Done, clustering results is written to "$output_dir"/GeLuster.tsv!"
