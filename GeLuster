#!/bin/bash
shellpath=`dirname $0`
output_dir="geluster_outdir"
temp_dir="tempDir"
reads="No_input"
seqType="cDNA"
readsformat="fq"
itrnum=3
tempCluster=""
usage()
{
cat << EOT
===========================================================================

GeLuster v.1.0 usage:

** Required **

--reads/-r <string>		: path to the read file

---------------------------------------------------------------------------

** Options **

--help/-h			  : Output GeLuster Help Information.

--version/-v			  : Print current version of GeLuster.

--iteration/-i <int>		  : Number of GeLuster iterations ([3,9], default: 3).

--seqType/-s <string>		  : dRNA for direct RNA (default:cDNA).

--rform/-f <string>		  : fa for .fasta(.fa) format, fq for .fastq(.fq) format (default: fq).

--output_dir/-o <string>	  : Output path, default: geluster_outdir.

---------------------------------------------------------------------------

** Typical commands **

A typical GeLuster command might be:

  GeLuster -r reads.fastq -f fq -s cDNA -o geluster_outdir

===========================================================================
EOT
}
#usage

# parse options:
RET=`getopt -o hvr:o:i:s:f: \
--long help,version,reads:,output_dir:,\
iteration:,seqType:,format:\
  -n ' * ERROR' -- "$@"`

# Note the quotes around $RET: they are essential!
eval set -- "$RET"
# set option values
while true; do
    case "$1" in
        -h | --help ) usage; exit 1;;
        -v | --version ) echo "** The current version of GeLuster is v.1.0 **"; exit 1;;
        -o | --output_dir) output_dir=$2     
			shift 2 ;;
        -r | --reads) reads=$2 
			shift 2 ;;
        -i | --iteration) itrnum=$2 
			shift 2 ;;
        -s | --seqType) seqType=$2 
			shift 2 ;;
        -f | --rform) readsformat=$2 
			shift 2 ;;
        -- ) shift; break ;;
        * ) echoerror "internal error!" ; exit 1 ;;
     esac
done

if [ $reads == "No_input" ]; then
         echo "    "
         echo "[Error] : Reads file is not provided!"
         echo "    "
	 usage
         exit 1
fi
if [ ! -e $reads ];then
        echo " ** Error: reads file is not exist! **"
        exit 1
fi
geluster_run_1st()
{
    tempDir=$output_dir/$temp_dir
    log=$output_dir/geluster.log

    iFlag=$1
    query=$reads

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/PseudoRef $query $readsformat $iFlag $seqType $tempDir" >$log
    $shellpath/src/PseudoRef $query $readsformat $iFlag $seqType $tempDir
    ref=$tempDir/$iFlag".pseudo.fasta"

    prefix=$tempDir/$iFlag".pseudo"

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] minimap2 -ax splice -k 11 $ref $query > $prefix.sam" >>$log
    minimap2 -ax splice -k 11 $ref $query > $prefix.sam 2>>$log
    samtools sort  -o $prefix.bam $prefix.sam 2>>$log

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".alignment.info" ">>$log
    $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".alignment.info" 


    query2=$tempDir/$iFlag".pseudo.fasta"
    prefix=$tempDir/$iFlag".pseudo-self"
    if [ $seqType == "cDNA" ]; then
	MyDate=$(date "+%d/%m/%Y %T")
        echo "[$MyDate] minimap2 -ax splice -k 11 -X -N 1 $ref $query2 > $prefix.sam" >>$log
        minimap2 -ax splice -k 11 -X -N 1 $ref $query2 > $prefix.sam 2>>$log
    	samtools sort  -o $prefix.bam $prefix.sam 2>>$log

	MyDate=$(date "+%d/%m/%Y %T")
    	echo "[$MyDate] $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".self.alignment.info"">>$log
    	$shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".self.alignment.info" 
    fi

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/get_cluster $query $readsformat $tempDir/$iFlag".pseudoref-reads.info" $tempDir/$iFlag".alignment.info" $tempDir/$iFlag".self.alignment.info" $iFlag $seqType $tempDir" >>$log
    $shellpath/src/get_cluster $query $readsformat $tempDir/$iFlag".pseudoref-reads.info" $tempDir/$iFlag".alignment.info" $tempDir/$iFlag".self.alignment.info" $iFlag $seqType $tempDir
    tempCluster="$tempCluster $tempDir/$iFlag.myCluster_multi.tsv"
}
geluster_run_iteration()
{
    tempDir=$output_dir/$temp_dir
    log=$output_dir/geluster.log

    iFlag=$1
    iFlag_pre=$2
    query=$tempDir/$iFlag_pre.singleton.fasta

    MyDate=$(date "+%d/%m/%Y %T")
    echo " " >>$log
    echo "[$MyDate] $shellpath/src/PseudoRef $query fa $iFlag $seqType $tempDir" >>$log
    $shellpath/src/PseudoRef $query fa $iFlag $seqType $tempDir 
    ref=$tempDir/$iFlag".pseudo.fasta"

    prefix=$tempDir/$iFlag".pseudo"

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] minimap2 -ax splice -k 11 $ref $query > $prefix.sam  2>>$log" >>$log
    minimap2 -ax splice -k 11 $ref $query > $prefix.sam  2>>$log
    samtools sort  -o $prefix.bam $prefix.sam 2>>$log

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".alignment.info" " >>$log
    $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".alignment.info" 

    query2=$tempDir/$iFlag".pseudo.fasta"
    prefix=$tempDir/$iFlag".pseudo-self"
    if [ $seqType == "cDNA" ]; then
      MyDate=$(date "+%d/%m/%Y %T")
      echo "[$MyDate] minimap2 -ax splice -k 11 -X -N 1 $ref $query2 > $prefix.sam 2>>$log" >>$log
      minimap2 -ax splice -k 11 -X -N 1 $ref $query2 > $prefix.sam 2>>$log
      samtools sort  -o $prefix.bam $prefix.sam 2>>$log

      MyDate=$(date "+%d/%m/%Y %T")
      echo "[$MyDate] $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".self.alignment.info" " >>$log
      $shellpath/src/get_alignment_info $prefix".bam" $tempDir/$iFlag".self.alignment.info" 
    fi

    MyDate=$(date "+%d/%m/%Y %T")
    echo "[$MyDate] $shellpath/src/get_cluster $query fa $tempDir/$iFlag".pseudoref-reads.info" $tempDir/$iFlag".alignment.info" $tempDir/$iFlag".self.alignment.info" $iFlag $seqType $tempDir" >>$log
    $shellpath/src/get_cluster $query fa $tempDir/$iFlag".pseudoref-reads.info" $tempDir/$iFlag".alignment.info" $tempDir/$iFlag".self.alignment.info" $iFlag $seqType $tempDir
    tempCluster="$tempCluster $tempDir/$iFlag.myCluster_multi.tsv"
}

MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Running..."
if [ ! -x "$output_dir" ]; then  
    mkdir -p $output_dir/$temp_dir
else 
    echo "[$MyDate] [Warning] : $output_dir exists already. It will be overwritten."
    rm -rf $output_dir
    mkdir -p $output_dir/$temp_dir
fi

########################################=======================================================
MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] First iteration..."
geluster_run_1st "1st"

MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Second iteration..."
geluster_run_iteration "2nd" "1st"

MyDate=$(date "+%d/%m/%Y %T")
echo "[$MyDate] Third iteration..."
geluster_run_iteration "3rd" "2nd"
########################################=======================================================
MyDate=$(date "+%d/%m/%Y %T")
echo " ">>$log
echo "[$MyDate] $shellpath/src/FinalCluster $tempCluster $output_dir"/GeLuster.tsv"" >>$log
$shellpath/src/FinalCluster $tempCluster $output_dir"/GeLuster.tsv"

MyDate=$(date "+%d/%m/%Y %T")
echo " ">>$log
echo "[$MyDate] Done, clustering results is written to "$output_dir"/GeLuster.tsv!" >>$log
echo "[$MyDate] Done, clustering results is written to "$output_dir"/GeLuster.tsv!"
